generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  email               String        @unique @map("email")
  passwordHash        String        @map("password_hash")
  username            String        @unique @map("username")
  role                UserRole      @default(USER) @map("role")
  firstName           String?       @map("first_name")
  lastName            String?       @map("last_name")
  phoneNumber         String?       @map("phone_number")
  address             String?       @map("address")
  city                String?       @map("city")
  country             String        @map("country")
  postalCode          String?       @map("postal_code")
  points              Int           @default(0) @map("points")
  totalGamesPlayed    Int           @default(0) @map("total_games_played")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @default(now()) @updatedAt @map("updated_at")
  lastLoginAt         DateTime?     @map("last_login_at")
  isVerified          Boolean       @default(false) @map("is_verified")
  isActive            Boolean       @default(true) @map("is_active")
  currency            String        @map("currency")
  pointsRate          Float         @map("points_rate")
  region              Region        @map("region")
  id                  String        @id @default(uuid()) @map("id") @db.Uuid
  verificationExpires DateTime?     @map("verification_expires")
  verificationToken   String?       @unique @map("verification_token")
  profile             Profile?
  sessions            Session[]
  transactions        Transaction[]
  userPrizes          UserPrize[]
  createdAds          AdBanner[]    @relation("AdCreator")
  editedAds           AdBanner[]    @relation("AdEditor")
  communityMembers    CommunityMember[]
  createdCommunities  Community[]
  communityTransactions CommunityTransaction[]
  createdCauses       CommunityCause[]
  
  @@map("users")
}

model Profile {
  id           String        @id @default(uuid()) @map("id") @db.Uuid
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at")
  userId       String        @unique @map("user_id") @db.Uuid
  country      String        @map("country")
  firstName    String        @map("first_name")
  lastName     String        @map("last_name")
  phoneNumber  String?       @map("phone_number")
  image_url    String?       @map("image_url")
  gameSessions GameSession[]
  user         User          @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Session {
  token     String   @unique @map("token")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  id        String   @id @default(uuid()) @map("id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model GameSession {
  id           String        @id @default(uuid()) @map("id") @db.Uuid
  profileId    String        @map("profile_id") @db.Uuid
  gameId       String        @map("game_id") @db.Uuid
  type         GameType      @map("type")
  points       Int           @map("points")
  hasWon       Boolean       @default(false) @map("has_won")
  matchedPairs Int           @default(0) @map("matched_pairs")
  result       Json?         @map("result")
  metadata     Json?         @map("metadata")
  createdAt    DateTime      @default(now()) @map("created_at")
  endedAt      DateTime?     @map("ended_at")
  cardFlips    CardFlip[]
  game         Game          @relation(fields: [gameId], references: [id])
  profile      Profile       @relation(fields: [profileId], references: [id])
  transactions Transaction[]
  userPrizes   UserPrize[]
  communityTransactions CommunityTransaction[]

  @@map("game_sessions")
}

model Game {
  id           String        @id @default(uuid()) @map("id") @db.Uuid
  name         String        @map("name")
  type         GameType      @map("type")
  description  String?       @map("description")
  minPoints    Int           @map("min_points")
  maxPoints    Int           @map("max_points")
  winRate      Float         @map("win_rate")
  isActive     Boolean       @default(true) @map("is_active")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at")
  gameSessions GameSession[]

  @@map("games")
}

model Transaction {
  type          TransactionType   @map("type")
  status        TransactionStatus @default(PENDING) @map("status")
  pointsAmount  Int               @map("points_amount")
  createdAt     DateTime          @default(now()) @map("created_at")
  description   String?           @map("description")
  id            String            @id @default(uuid()) @map("id") @db.Uuid
  userId        String            @map("user_id") @db.Uuid
  gameSessionId String?           @map("game_session_id") @db.Uuid
  gameSession   GameSession?      @relation(fields: [gameSessionId], references: [id])
  user          User              @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model CardFlip {
  id            String      @id @default(uuid()) @map("id") @db.Uuid
  gameSessionId String      @map("game_session_id") @db.Uuid
  cardIndex     Int         @map("card_index")
  isMatched     Boolean     @default(false) @map("is_matched")
  createdAt     DateTime    @default(now()) @map("created_at")
  gameSession   GameSession @relation(fields: [gameSessionId], references: [id])

  @@map("card_flips")
}

model UserPrize {
  id              String       @id @default(uuid()) @map("id") @db.Uuid
  userId          String       @map("user_id") @db.Uuid
  prizeId         String       @map("prize_id") @db.Uuid
  gameSessionId   String?      @map("game_session_id") @db.Uuid
  status          PrizeStatus  @default(PENDING) @map("status")
  trackingNumber  String?      @map("tracking_number")
  shippingAddress String?      @map("shipping_address")
  claimedAt       DateTime     @default(now()) @map("claimed_at")
  shippedAt       DateTime?    @map("shipped_at")
  deliveredAt     DateTime?    @map("delivered_at")
  notes           String?      @map("notes")
  gameSession     GameSession? @relation(fields: [gameSessionId], references: [id])
  prize           Prize        @relation(fields: [prizeId], references: [id])
  user            User         @relation(fields: [userId], references: [id])

  @@map("user_prizes")
}

model Prize {
  id          String      @id @default(uuid()) @map("id") @db.Uuid
  name        String      @map("name")
  description String?     @map("description")
  category    String      @map("category")
  pointsCost  Int         @map("points_cost")
  stock       Int         @default(0) @map("stock")
  imageUrl    String?     @map("image_url")
  isActive    Boolean     @default(true) @map("is_active")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @updatedAt @map("updated_at")
  userPrizes  UserPrize[]

  @@map("prizes")
}

model AdminTreasury {
  id                 String   @id @default(uuid()) @map("id") @db.Uuid
  pointsBalance      Int      @map("points_balance")
  lastUpdated        DateTime @default(now()) @map("last_updated")
  minRequiredBalance Int      @map("min_required_balance")

  @@map("admin_treasury")
}

model DailyStat {
  id                 String   @id @default(uuid()) @map("id") @db.Uuid
  date               DateTime @unique @map("date")
  totalGamesPlayed   Int      @default(0) @map("total_games_played")
  totalPointsWagered Int      @default(0) @map("total_points_wagered")
  totalPointsWon     Int      @default(0) @map("total_points_won")
  totalPrizesClaimed Int      @default(0) @map("total_prizes_claimed")
  uniquePlayers      Int      @default(0) @map("unique_players")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("daily_stats")
}

model Community {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @map("name")
  description     String?           @map("description")
  cause           String            @map("cause")
  targetAmount    Float             @map("target_amount")
  currentAmount   Float             @default(0) @map("current_amount")
  imageUrl        String?           @map("image_url")
  isActive        Boolean           @default(true) @map("is_active")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at")
  createdBy       String            @map("created_by") @db.Uuid
  deletedAt       DateTime?         @map("deleted_at")
  
  // Relations
  creator         User              @relation(fields: [createdBy], references: [id])
  members         CommunityMember[]
  transactions    CommunityTransaction[]
  competitions    CommunityCompetition[]

  @@map("communities")
}

model CommunityMember {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  communityId     String            @map("community_id") @db.Uuid
  userId          String            @map("user_id") @db.Uuid
  role            CommunityRole     @default(MEMBER) @map("role")
  joinedAt        DateTime          @default(now()) @map("joined_at")
  
  // Relations
  community       Community         @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([communityId, userId])
  @@map("community_members")
}

model CommunityTransaction {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  communityId     String            @map("community_id") @db.Uuid
  userId          String            @map("user_id") @db.Uuid
  gameSessionId   String?           @map("game_session_id") @db.Uuid
  amount          Int               @map("amount")
  type            CommunityTransactionType @map("type")
  createdAt       DateTime          @default(now()) @map("created_at")
  description     String?           @map("description")
  
  // Relations
  community       Community         @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameSession     GameSession?      @relation(fields: [gameSessionId], references: [id], onDelete: SetNull)

  @@map("community_transactions")
}

// Modèle pour les causes communautaires
model CommunityCause {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @map("name")
  description     String?           @map("description")
  targetAmount    Float             @map("target_amount")
  currentAmount   Float             @default(0) @map("current_amount")
  imageUrl        String?           @map("image_url")
  startDate       DateTime          @map("start_date")
  endDate         DateTime?         @map("end_date")
  isActive        Boolean           @default(true) @map("is_active")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at")
  createdBy       String            @map("created_by") @db.Uuid
  maxCommunities  Int               @default(5) @map("max_communities")
  packPrice       Float             @map("pack_price")
  winningAmount   Float             @map("winning_amount")
  status          CauseStatus       @default(PENDING) @map("status")
  
  // Relations
  creator         User              @relation(fields: [createdBy], references: [id])
  competitions    CommunityCompetition[]

  @@map("community_causes")
}

// Modèle pour les compétitions communautaires
model CommunityCompetition {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  causeId         String            @map("cause_id") @db.Uuid
  communityId     String            @map("community_id") @db.Uuid
  hasPaid         Boolean           @default(false) @map("has_paid")
  hasWon          Boolean           @default(false) @map("has_won")
  joinedAt        DateTime          @default(now()) @map("joined_at")
  paymentAmount   Float?            @map("payment_amount")
  paymentDate     DateTime?         @map("payment_date")
  
  // Relations
  cause           CommunityCause    @relation(fields: [causeId], references: [id])
  community       Community         @relation(fields: [communityId], references: [id])

  @@map("community_competitions")
}



enum GameType {
  FOODS   @map("FOODS")
  MODE    @map("MODE")
  WHEEL   @map("WHEEL")
  JACKPOT @map("JACKPOT")
  COMMUNITY_JACKPOT @map("COMMUNITY_JACKPOT")
}

// Enum pour le statut des causes
enum CauseStatus {
  PENDING    @map("PENDING")
  ACTIVE     @map("ACTIVE")
  COMPLETED  @map("COMPLETED")
  CANCELLED  @map("CANCELLED")
}

enum TransactionType {
  DEPOSIT        @map("DEPOSIT")
  WITHDRAWAL     @map("WITHDRAWAL")
  BET            @map("BET")
  WIN            @map("WIN")
  REFUND         @map("REFUND")
  PAYMENT        @map("PAYMENT")
  PAYMENT_PENDING @map("PAYMENT_PENDING")
  PAYMENT_FAILED @map("PAYMENT_FAILED")
}

enum TransactionStatus {
  PENDING   @map("PENDING")
  COMPLETED @map("COMPLETED")
  FAILED    @map("FAILED")
}

enum PrizeStatus {
  PENDING   @map("PENDING")
  SHIPPED   @map("SHIPPED")
  DELIVERED @map("DELIVERED")
  CANCELLED @map("CANCELLED")
}

enum UserRole {
  USER      @map("USER")
  ADMIN     @map("ADMIN")
  MODERATOR @map("MODERATOR")
}

enum Region {
  BLACK_AFRICA @map("BLACK_AFRICA")
  NORTH_AFRICA @map("NORTH_AFRICA")
  EUROPE       @map("EUROPE")
  AMERICAS     @map("AMERICAS")
  ASIA         @map("ASIA")
}

enum AdPosition {
  TOP
  MIDDLE
  BOTTOM
}

enum CommunityRole {
  ADMIN     @map("ADMIN")
  MODERATOR @map("MODERATOR")
  MEMBER    @map("MEMBER")
}

enum CommunityTransactionType {
  CONTRIBUTION @map("CONTRIBUTION")
  GAME_WIN     @map("GAME_WIN")
  WITHDRAWAL   @map("WITHDRAWAL")
  BONUS        @map("BONUS")
  COMPETITION_ENTRY @map("COMPETITION_ENTRY")
  COMPETITION_WIN @map("COMPETITION_WIN")
}

model AdBanner {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String      @map("title")
  description     String      @map("description")
  imageUrl        String      @map("image_url")
  ctaText         String      @map("cta_text")
  ctaLink         String      @map("cta_link")
  backgroundColor String?     @map("background_color")
  textColor       String?     @map("text_color")
  position        AdPosition  @map("position")
  isActive        Boolean     @default(true) @map("is_active")
  startDate       DateTime    @map("start_date")
  endDate         DateTime    @map("end_date")
  priority        Int         @default(0) @map("priority")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  createdBy       String      @map("created_by") @db.Uuid
  updatedBy       String?     @map("updated_by") @db.Uuid
  
  // Relations
  creator         User        @relation("AdCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  editor          User?       @relation("AdEditor", fields: [updatedBy], references: [id], onDelete: SetNull)

  @@map("ad_banners")
}
